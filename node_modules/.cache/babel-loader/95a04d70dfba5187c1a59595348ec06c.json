{"ast":null,"code":"class SwapiService {\n  constructor() {\n    this._startUrl = 'https://swapi.dev/api/';\n  }\n\n  async fetchToSwapi(url) {\n    const f = await fetch(this._startUrl + url.toString());\n\n    if (!f.ok) {\n      throw new Error(`Not fetch url ${url}. Error status - ${f.status}`);\n    }\n\n    return await f.json();\n  }\n\n  async getAllPeople() {\n    const r = await this.fetchToSwapi('people');\n    return r.results;\n  }\n\n  async getPeople(id) {\n    return await this.fetchToSwapi(`people/${id}`);\n  }\n\n  async getAllPlanets() {\n    const planets = await this.fetchToSwapi('planets');\n    return planets.results.map(planet => this._transformPlanet(planet));\n  }\n\n  async getPlanet(id) {\n    const planet = await this.fetchToSwapi(`planets/${id}`);\n    return this._transformPlanet(planet);\n  }\n\n  _extractId(item) {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n    return item.url.match(idRegExp)[1];\n  }\n\n  _transformPlanet(planet) {\n    const id = this._extractId(planet);\n\n    return {\n      id,\n      name: planet.name,\n      population: planet.population,\n      rotationPeriod: planet.rotation_period,\n      diameter: planet.diameter\n    };\n  }\n\n  _transformStarShip(ship) {\n    const id = this._extractId(ship);\n\n    return {\n      id,\n      name: ship.name,\n      model: ship.model,\n      manufacturer: ship.manufacturer,\n      costInCredit: ship.costInCredit,\n      length: ship.length,\n      crew: ship.crew,\n      cargoCapacity: ship.cargoCapacity\n    };\n  }\n\n}\n\nexport const swapi = new SwapiService();","map":{"version":3,"sources":["/home/user/Рабочий стол/star-db/src/services/swapi/SwapiService.js"],"names":["SwapiService","_startUrl","fetchToSwapi","url","f","fetch","toString","ok","Error","status","json","getAllPeople","r","results","getPeople","id","getAllPlanets","planets","map","planet","_transformPlanet","getPlanet","_extractId","item","idRegExp","match","name","population","rotationPeriod","rotation_period","diameter","_transformStarShip","ship","model","manufacturer","costInCredit","length","crew","cargoCapacity","swapi"],"mappings":"AAAA,MAAMA,YAAN,CAAmB;AAAA;AAAA,SACfC,SADe,GACH,wBADG;AAAA;;AAGG,QAAZC,YAAY,CAACC,GAAD,EAAM;AACpB,UAAMC,CAAC,GAAG,MAAMC,KAAK,CAAC,KAAKJ,SAAL,GAAiBE,GAAG,CAACG,QAAJ,EAAlB,CAArB;;AACA,QAAI,CAACF,CAAC,CAACG,EAAP,EAAW;AACP,YAAM,IAAIC,KAAJ,CAAW,iBAAgBL,GAAI,oBAAmBC,CAAC,CAACK,MAAO,EAA3D,CAAN;AACH;;AACD,WAAO,MAAML,CAAC,CAACM,IAAF,EAAb;AACH;;AAEiB,QAAZC,YAAY,GAAG;AACjB,UAAMC,CAAC,GAAG,MAAM,KAAKV,YAAL,CAAkB,QAAlB,CAAhB;AACA,WAAOU,CAAC,CAACC,OAAT;AACH;;AAEc,QAATC,SAAS,CAACC,EAAD,EAAK;AAChB,WAAO,MAAM,KAAKb,YAAL,CAAmB,UAASa,EAAG,EAA/B,CAAb;AACH;;AAEkB,QAAbC,aAAa,GAAG;AAClB,UAAMC,OAAO,GAAG,MAAM,KAAKf,YAAL,CAAkB,SAAlB,CAAtB;AACA,WAAOe,OAAO,CAACJ,OAAR,CAAgBK,GAAhB,CAAoBC,MAAM,IAAI,KAAKC,gBAAL,CAAsBD,MAAtB,CAA9B,CAAP;AACH;;AAEc,QAATE,SAAS,CAACN,EAAD,EAAK;AAChB,UAAMI,MAAM,GAAG,MAAM,KAAKjB,YAAL,CAAmB,WAAUa,EAAG,EAAhC,CAArB;AACA,WAAO,KAAKK,gBAAL,CAAsBD,MAAtB,CAAP;AACH;;AAEDG,EAAAA,UAAU,CAACC,IAAD,EAAO;AACb,UAAMC,QAAQ,GAAG,eAAjB;AACA,WAAOD,IAAI,CAACpB,GAAL,CAASsB,KAAT,CAAeD,QAAf,EAAyB,CAAzB,CAAP;AACH;;AAEDJ,EAAAA,gBAAgB,CAACD,MAAD,EAAS;AACrB,UAAMJ,EAAE,GAAG,KAAKO,UAAL,CAAgBH,MAAhB,CAAX;;AACA,WAAO;AACHJ,MAAAA,EADG;AAEHW,MAAAA,IAAI,EAAEP,MAAM,CAACO,IAFV;AAGHC,MAAAA,UAAU,EAAER,MAAM,CAACQ,UAHhB;AAIHC,MAAAA,cAAc,EAAET,MAAM,CAACU,eAJpB;AAKHC,MAAAA,QAAQ,EAAEX,MAAM,CAACW;AALd,KAAP;AAOH;;AACDC,EAAAA,kBAAkB,CAACC,IAAD,EAAO;AACrB,UAAMjB,EAAE,GAAG,KAAKO,UAAL,CAAgBU,IAAhB,CAAX;;AACA,WAAO;AACHjB,MAAAA,EADG;AAEHW,MAAAA,IAAI,EAAEM,IAAI,CAACN,IAFR;AAGHO,MAAAA,KAAK,EAAED,IAAI,CAACC,KAHT;AAIHC,MAAAA,YAAY,EAAEF,IAAI,CAACE,YAJhB;AAKHC,MAAAA,YAAY,EAAEH,IAAI,CAACG,YALhB;AAMHC,MAAAA,MAAM,EAAEJ,IAAI,CAACI,MANV;AAOHC,MAAAA,IAAI,EAAEL,IAAI,CAACK,IAPR;AAQHC,MAAAA,aAAa,EAAEN,IAAI,CAACM;AARjB,KAAP;AAUH;;AAzDc;;AA6DnB,OAAO,MAAMC,KAAK,GAAG,IAAIvC,YAAJ,EAAd","sourcesContent":["class SwapiService {\n    _startUrl = 'https://swapi.dev/api/';\n\n    async fetchToSwapi(url) {\n        const f = await fetch(this._startUrl + url.toString())\n        if (!f.ok) {\n            throw new Error(`Not fetch url ${url}. Error status - ${f.status}`)\n        }\n        return await f.json()\n    }\n\n    async getAllPeople() {\n        const r = await this.fetchToSwapi('people')\n        return r.results\n    }\n\n    async getPeople(id) {\n        return await this.fetchToSwapi(`people/${id}`)\n    }\n\n    async getAllPlanets() {\n        const planets = await this.fetchToSwapi('planets')\n        return planets.results.map(planet => this._transformPlanet(planet))\n    }\n\n    async getPlanet(id) {\n        const planet = await this.fetchToSwapi(`planets/${id}`)\n        return this._transformPlanet(planet)\n    }\n\n    _extractId(item) {\n        const idRegExp = /\\/([0-9]*)\\/$/;\n        return item.url.match(idRegExp)[1];\n    }\n\n    _transformPlanet(planet) {\n        const id = this._extractId(planet)\n        return {\n            id,\n            name: planet.name,\n            population: planet.population,\n            rotationPeriod: planet.rotation_period,\n            diameter: planet.diameter\n        }\n    }\n    _transformStarShip(ship) {\n        const id = this._extractId(ship)\n        return {\n            id,\n            name: ship.name,\n            model: ship.model,\n            manufacturer: ship.manufacturer,\n            costInCredit: ship.costInCredit,\n            length: ship.length,\n            crew: ship.crew,\n            cargoCapacity: ship.cargoCapacity\n        }\n    }\n\n}\n\nexport const swapi = new SwapiService()\n"]},"metadata":{},"sourceType":"module"}
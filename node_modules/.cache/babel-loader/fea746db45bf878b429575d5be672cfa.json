{"ast":null,"code":"class SwapiService {\n  constructor() {\n    this._startUrl = 'https://swapi.dev/api/';\n\n    this._fetchToSwapi = async url => {\n      const f = await fetch(this._startUrl + url.toString());\n\n      if (!f.ok) {\n        throw new Error(`Not fetch url ${url}. Error status - ${f.status}`);\n      }\n\n      return await f.json();\n    };\n\n    this.getAllStarship = async () => {\n      const starships = await this._fetchToSwapi('starships');\n      return starships.results.map(people => this._transformStarShip(people));\n    };\n\n    this.getStarship = async id => {\n      const starship = await this._fetchToSwapi(`starships/${id}`);\n      return this._transformStarShip(starship);\n    };\n\n    this.getAllPeople = async () => {\n      const peoples = await this._fetchToSwapi('people');\n      return peoples.results.map(people => this._transformPerson(people));\n    };\n\n    this.getPeople = async id => {\n      const people = await this._fetchToSwapi(`people/${id}`);\n      return this._transformPerson(people);\n    };\n\n    this.getAllPlanets = async () => {\n      const planets = await this._fetchToSwapi('planets');\n      return planets.results.map(planet => this._transformPlanet(planet));\n    };\n\n    this.getPlanet = async id => {\n      const planet = await this._fetchToSwapi(`planets/${id}`);\n      return this._transformPlanet(planet);\n    };\n  }\n\n  _extractId(item) {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n    return item.url.match(idRegExp)[1];\n  }\n\n  _transformPlanet(planet) {\n    const id = this._extractId(planet);\n\n    return {\n      id,\n      name: planet.name,\n      population: planet.population,\n      rotationPeriod: planet.rotation_period,\n      diameter: planet.diameter\n    };\n  }\n\n  _transformStarShip(ship) {\n    const id = this._extractId(ship);\n\n    return {\n      id,\n      name: ship.name,\n      model: ship.model,\n      manufacturer: ship.manufacturer,\n      costInCredit: ship.costInCredit,\n      length: ship.length,\n      crew: ship.crew,\n      passengers: ship.passengers,\n      cargoCapacity: ship.cargoCapacity\n    };\n  }\n\n  _transformPerson(person) {\n    const id = this._extractId(person);\n\n    return {\n      id,\n      name: person.name,\n      gender: person.gender,\n      birthYear: person.birthYear,\n      eyeColor: person.eyeColor\n    };\n  }\n\n}\n\nexport const swapi = new SwapiService();","map":{"version":3,"sources":["/home/user/Рабочий стол/Git repos/sashabull66/sashabull66/sashabull66/starsDB/src/services/swapi/SwapiService.js"],"names":["SwapiService","_startUrl","_fetchToSwapi","url","f","fetch","toString","ok","Error","status","json","getAllStarship","starships","results","map","people","_transformStarShip","getStarship","id","starship","getAllPeople","peoples","_transformPerson","getPeople","getAllPlanets","planets","planet","_transformPlanet","getPlanet","_extractId","item","idRegExp","match","name","population","rotationPeriod","rotation_period","diameter","ship","model","manufacturer","costInCredit","length","crew","passengers","cargoCapacity","person","gender","birthYear","eyeColor","swapi"],"mappings":"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","sourcesContent":["class SwapiService {\n    _startUrl = 'https://swapi.dev/api/';\n    _extractId(item) {\n        const idRegExp = /\\/([0-9]*)\\/$/;\n        return item.url.match(idRegExp)[1];\n    };\n    _transformPlanet(planet) {\n        const id = this._extractId(planet)\n        return {\n            id,\n            name: planet.name,\n            population: planet.population,\n            rotationPeriod: planet.rotation_period,\n            diameter: planet.diameter\n        }\n    };\n    _transformStarShip(ship) {\n        const id = this._extractId(ship)\n        return {\n            id,\n            name: ship.name,\n            model: ship.model,\n            manufacturer: ship.manufacturer,\n            costInCredit: ship.costInCredit,\n            length: ship.length,\n            crew: ship.crew,\n            passengers: ship.passengers,\n            cargoCapacity: ship.cargoCapacity\n        }\n    };\n    _transformPerson(person) {\n        const id = this._extractId(person)\n        return {\n            id,\n            name: person.name,\n            gender: person.gender,\n            birthYear: person.birthYear,\n            eyeColor: person.eyeColor\n        }\n    };\n    _fetchToSwapi = async (url) => {\n        const f = await fetch(this._startUrl + url.toString())\n        if (!f.ok) {\n            throw new Error(`Not fetch url ${url}. Error status - ${f.status}`)\n        }\n        return await f.json()\n    };\n\n    getAllStarship = async () => {\n        const starships = await this._fetchToSwapi('starships')\n        return starships.results.map(people=>this._transformStarShip(people))\n    };\n    getStarship = async (id) => {\n        const starship = await this._fetchToSwapi(`starships/${id}`)\n        return this._transformStarShip(starship)\n    };\n     getAllPeople = async () => {\n        const peoples = await this._fetchToSwapi('people')\n        return peoples.results.map(people=>this._transformPerson(people))\n    };\n    getPeople = async (id) => {\n        const people = await this._fetchToSwapi(`people/${id}`)\n        return this._transformPerson(people)\n    };\n     getAllPlanets = async () => {\n        const planets = await this._fetchToSwapi('planets')\n        return planets.results.map(planet => this._transformPlanet(planet))\n    };\n    getPlanet = async (id) => {\n        const planet = await this._fetchToSwapi(`planets/${id}`)\n        return this._transformPlanet(planet)\n    };\n}\n\nexport const swapi = new SwapiService();\n"]},"metadata":{},"sourceType":"module"}
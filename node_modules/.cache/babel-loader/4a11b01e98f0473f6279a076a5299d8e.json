{"ast":null,"code":"class SwapiService {\n  constructor() {\n    this._startUrl = 'https://swapi.dev/api/';\n  }\n\n  _extractId(item) {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n    return item.url.match(idRegExp)[1];\n  }\n\n  _transformPlanet(planet) {\n    const id = this._extractId(planet);\n\n    return {\n      id,\n      name: planet.name,\n      population: planet.population,\n      rotationPeriod: planet.rotation_period,\n      diameter: planet.diameter\n    };\n  }\n\n  _transformStarShip(ship) {\n    const id = this._extractId(ship);\n\n    return {\n      id,\n      name: ship.name,\n      model: ship.model,\n      manufacturer: ship.manufacturer,\n      costInCredit: ship.costInCredit,\n      length: ship.length,\n      crew: ship.crew,\n      passengers: ship.passengers,\n      cargoCapacity: ship.cargoCapacity\n    };\n  }\n\n  _transformPerson(person) {\n    const id = this._extractId(person);\n\n    return {\n      id,\n      name: person.name,\n      gender: person.gender,\n      birthYear: person.birthYear,\n      eyeColor: person.eyeColor\n    };\n  }\n\n  async _fetchToSwapi(url) {\n    const f = await fetch(this._startUrl + url.toString());\n\n    if (!f.ok) {\n      throw new Error(`Not fetch url ${url}. Error status - ${f.status}`);\n    }\n\n    return await f.json();\n  }\n\n  async getAllStarship() {\n    const starships = await this._fetchToSwapi('starships');\n    return starships.results.map(people => this._transformStarShip(people));\n  }\n\n  async getStarship(id) {\n    const starship = await this._fetchToSwapi(`starships/${id}`);\n    return this._transformStarShip(starship);\n  }\n\n  async getAllPeople() {\n    console.log(this._fetchToSwapi);\n    const peoples = await this._fetchToSwapi('people');\n    return peoples.results.map(people => this._transformPerson(people));\n  }\n\n  async getPeople(id) {\n    const people = await this._fetchToSwapi(`people/${id}`);\n    return this._transformPerson(people);\n  }\n\n  async getAllPlanets() {\n    const planets = await this._fetchToSwapi('planets');\n    return planets.results.map(planet => this._transformPlanet(planet));\n  }\n\n  async getPlanet(id) {\n    const planet = await this._fetchToSwapi(`planets/${id}`);\n    return this._transformPlanet(planet);\n  }\n\n}\n\nexport const swapi = new SwapiService();","map":{"version":3,"sources":["/home/user/Рабочий стол/Git repos/sashabull66/sashabull66/sashabull66/starsDB/src/services/swapi/SwapiService.js"],"names":["SwapiService","_startUrl","_extractId","item","idRegExp","url","match","_transformPlanet","planet","id","name","population","rotationPeriod","rotation_period","diameter","_transformStarShip","ship","model","manufacturer","costInCredit","length","crew","passengers","cargoCapacity","_transformPerson","person","gender","birthYear","eyeColor","_fetchToSwapi","f","fetch","toString","ok","Error","status","json","getAllStarship","starships","results","map","people","getStarship","starship","getAllPeople","console","log","peoples","getPeople","getAllPlanets","planets","getPlanet","swapi"],"mappings":"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","sourcesContent":["class SwapiService {\n    _startUrl = 'https://swapi.dev/api/';\n    _extractId(item) {\n        const idRegExp = /\\/([0-9]*)\\/$/;\n        return item.url.match(idRegExp)[1];\n    };\n    _transformPlanet(planet) {\n        const id = this._extractId(planet)\n        return {\n            id,\n            name: planet.name,\n            population: planet.population,\n            rotationPeriod: planet.rotation_period,\n            diameter: planet.diameter\n        }\n    };\n    _transformStarShip(ship) {\n        const id = this._extractId(ship)\n        return {\n            id,\n            name: ship.name,\n            model: ship.model,\n            manufacturer: ship.manufacturer,\n            costInCredit: ship.costInCredit,\n            length: ship.length,\n            crew: ship.crew,\n            passengers: ship.passengers,\n            cargoCapacity: ship.cargoCapacity\n        }\n    };\n    _transformPerson(person) {\n        const id = this._extractId(person)\n        return {\n            id,\n            name: person.name,\n            gender: person.gender,\n            birthYear: person.birthYear,\n            eyeColor: person.eyeColor\n        }\n    };\n    async _fetchToSwapi(url) {\n        const f = await fetch(this._startUrl + url.toString())\n        if (!f.ok) {\n            throw new Error(`Not fetch url ${url}. Error status - ${f.status}`)\n        }\n        return await f.json()\n    };\n\n    async getAllStarship() {\n        const starships = await this._fetchToSwapi('starships')\n        return starships.results.map(people=>this._transformStarShip(people))\n    };\n    async getStarship(id) {\n        const starship = await this._fetchToSwapi(`starships/${id}`)\n        return this._transformStarShip(starship)\n    };\n    async getAllPeople() {\n        console.log(this._fetchToSwapi)\n        const peoples = await this._fetchToSwapi('people')\n        return peoples.results.map(people=>this._transformPerson(people))\n    };\n    async getPeople(id) {\n        const people = await this._fetchToSwapi(`people/${id}`)\n        return this._transformPerson(people)\n    };\n    async getAllPlanets() {\n        const planets = await this._fetchToSwapi('planets')\n        return planets.results.map(planet => this._transformPlanet(planet))\n    };\n    async getPlanet(id) {\n        const planet = await this._fetchToSwapi(`planets/${id}`)\n        return this._transformPlanet(planet)\n    };\n}\n\nexport const swapi = new SwapiService();\n"]},"metadata":{},"sourceType":"module"}
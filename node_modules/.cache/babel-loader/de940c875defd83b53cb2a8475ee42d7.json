{"ast":null,"code":"var _jsxFileName = \"/home/user/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/Git repos/sashabull66/sashabull66/sashabull66/starsDB/src/components/RandomPlanet/RandomPlanet.js\";\nimport React, { Component } from 'react';\nimport './RandomPlanet.css';\nimport { swapi } from \"../../services/swapi/SwapiService\";\nimport Spinner from \"../Spinner\";\nimport ErrorComponent from \"../ErrorComponent\";\nimport PlanetView from \"./PlanetView\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass RandomPlanet extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      planet: {},\n      isLoading: true,\n      isError: false\n    };\n\n    this.onPlanetLoaded = planet => {\n      this.setState({\n        planet,\n        isLoading: false\n      });\n    };\n\n    this.onError = () => {\n      this.setState({\n        isLoading: false,\n        isError: true\n      });\n    };\n\n    this.updatePlanet = () => {\n      const id = Math.floor(Math.random() * 25 + 2);\n      swapi.getPlanet(id).then(planet => {\n        this.onPlanetLoaded(planet);\n      }).catch(this.onError);\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.onError();\n  }\n\n  componentDidMount() {\n    this.updatePlanet();\n    this.interval = setInterval(this.updatePlanet, 5000);\n  }\n\n  componentWillUnmount() {\n    // щи\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const {\n      isLoading,\n      planet,\n      isError\n    } = this.state;\n\n    const preloader = isLoading && !isError && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 52\n    }, this);\n\n    const content = !isLoading && !isError && /*#__PURE__*/_jsxDEV(PlanetView, { ...planet\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 51\n    }, this);\n\n    const error = isError && /*#__PURE__*/_jsxDEV(ErrorComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 34\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"random-planet jumbotron rounded\",\n      children: [preloader, content, error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default RandomPlanet;","map":{"version":3,"sources":["/home/user/Рабочий стол/Git repos/sashabull66/sashabull66/sashabull66/starsDB/src/components/RandomPlanet/RandomPlanet.js"],"names":["React","Component","swapi","Spinner","ErrorComponent","PlanetView","RandomPlanet","state","planet","isLoading","isError","onPlanetLoaded","setState","onError","updatePlanet","id","Math","floor","random","getPlanet","then","catch","componentDidCatch","error","errorInfo","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","preloader","content"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,oBAAP;AACA,SAAQC,KAAR,QAAoB,mCAApB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;;AAEA,MAAMC,YAAN,SAA2BL,SAA3B,CAAqC;AAAA;AAAA;AAAA,SAEjCM,KAFiC,GAEzB;AACJC,MAAAA,MAAM,EAAE,EADJ;AAEJC,MAAAA,SAAS,EAAE,IAFP;AAGJC,MAAAA,OAAO,EAAE;AAHL,KAFyB;;AAAA,SAqBjCC,cArBiC,GAqBfH,MAAD,IAAY;AACzB,WAAKI,QAAL,CAAc;AAACJ,QAAAA,MAAD;AAASC,QAAAA,SAAS,EAAE;AAApB,OAAd;AACH,KAvBgC;;AAAA,SAyBjCI,OAzBiC,GAyBvB,MAAM;AACZ,WAAKD,QAAL,CAAc;AACVH,QAAAA,SAAS,EAAE,KADD;AAEVC,QAAAA,OAAO,EAAE;AAFC,OAAd;AAIH,KA9BgC;;AAAA,SAgCjCI,YAhCiC,GAgClB,MAAM;AACjB,YAAMC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAAhB,GAAqB,CAAhC,CAAX;AACAhB,MAAAA,KAAK,CAACiB,SAAN,CAAgBJ,EAAhB,EACKK,IADL,CACWZ,MAAD,IAAY;AACd,aAAKG,cAAL,CAAoBH,MAApB;AACH,OAHL,EAIKa,KAJL,CAIW,KAAKR,OAJhB;AAKH,KAvCgC;AAAA;;AAQjCS,EAAAA,iBAAiB,CAACC,KAAD,EAAQC,SAAR,EAAmB;AAChC,SAAKX,OAAL;AACH;;AAEDY,EAAAA,iBAAiB,GAAG;AAChB,SAAKX,YAAL;AACA,SAAKY,QAAL,GAAgBC,WAAW,CAAC,KAAKb,YAAN,EAAoB,IAApB,CAA3B;AACH;;AAEDc,EAAAA,oBAAoB,GAAG;AAAE;AACrBC,IAAAA,aAAa,CAAC,KAAKH,QAAN,CAAb;AACH;;AAsBDI,EAAAA,MAAM,GAAG;AACL,UAAM;AAACrB,MAAAA,SAAD;AAAYD,MAAAA,MAAZ;AAAoBE,MAAAA;AAApB,QAA+B,KAAKH,KAA1C;;AACA,UAAMwB,SAAS,GAAGtB,SAAS,IAAI,CAACC,OAAd,iBAAyB,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAA3C;;AACA,UAAMsB,OAAO,GAAG,CAACvB,SAAD,IAAc,CAACC,OAAf,iBAA0B,QAAC,UAAD,OAAgBF;AAAhB;AAAA;AAAA;AAAA;AAAA,YAA1C;;AACA,UAAMe,KAAK,GAAGb,OAAO,iBAAI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAAzB;;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,iCAAf;AAAA,iBACKqB,SADL,EAEKC,OAFL,EAGKT,KAHL;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AArDgC;;AAwDrC,eAAejB,YAAf","sourcesContent":["import React, {Component} from 'react';\nimport './RandomPlanet.css'\nimport {swapi} from \"../../services/swapi/SwapiService\";\nimport Spinner from \"../Spinner\";\nimport ErrorComponent from \"../ErrorComponent\";\nimport PlanetView from \"./PlanetView\";\n\nclass RandomPlanet extends Component {\n\n    state = {\n        planet: {},\n        isLoading: true,\n        isError: false\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.onError()\n    }\n\n    componentDidMount() {\n        this.updatePlanet()\n        this.interval = setInterval(this.updatePlanet, 5000)\n    }\n\n    componentWillUnmount() { // щи\n        clearInterval(this.interval)\n    }\n\n    onPlanetLoaded = (planet) => {\n        this.setState({planet, isLoading: false})\n    }\n\n    onError = () => {\n        this.setState({\n            isLoading: false,\n            isError: true\n        })\n    }\n\n    updatePlanet = () => {\n        const id = Math.floor(Math.random() * 25 + 2)\n        swapi.getPlanet(id)\n            .then((planet) => {\n                this.onPlanetLoaded(planet)\n            })\n            .catch(this.onError)\n    }\n\n    render() {\n        const {isLoading, planet, isError} = this.state\n        const preloader = isLoading && !isError && <Spinner/>\n        const content = !isLoading && !isError && <PlanetView {...planet}/>\n        const error = isError && <ErrorComponent/>\n        return (\n            <div className='random-planet jumbotron rounded'>\n                {preloader}\n                {content}\n                {error}\n            </div>\n        )\n    }\n}\n\nexport default RandomPlanet;\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"class SwapiService {\n  constructor() {\n    this._startUrl = 'https://swapi.dev/api/';\n\n    this._extractId = item => {\n      const idRegExp = /\\/([0-9]*)\\/$/;\n      return item.url.match(idRegExp)[1];\n    };\n\n    this._transformPlanet = planet => {\n      const id = this._extractId(planet);\n\n      return {\n        id,\n        name: planet.name,\n        population: planet.population,\n        rotationPeriod: planet.rotation_period,\n        diameter: planet.diameter\n      };\n    };\n\n    this._transformStarShip = ship => {\n      const id = this._extractId(ship);\n\n      return {\n        id,\n        name: ship.name,\n        model: ship.model,\n        manufacturer: ship.manufacturer,\n        costInCredit: ship.costInCredit,\n        length: ship.length,\n        crew: ship.crew,\n        passengers: ship.passengers,\n        cargoCapacity: ship.cargoCapacity\n      };\n    };\n\n    this._transformPerson = person => {\n      const id = this._extractId(person);\n\n      return {\n        id,\n        name: person.name,\n        gender: person.gender,\n        birthYear: person.birth_year,\n        eyeColor: person.eye_color\n      };\n    };\n\n    this._fetchToSwapi = async url => {\n      const f = await fetch(this._startUrl + url.toString());\n\n      if (!f.ok) {\n        throw new Error(`Not fetch url ${url}. Error status - ${f.status}`);\n      }\n\n      return await f.json();\n    };\n\n    this.getAllStarship = async () => {\n      const starships = await this._fetchToSwapi('starships');\n      return starships.results.map(people => this._transformStarShip(people));\n    };\n\n    this.getStarship = async id => {\n      const starship = await this._fetchToSwapi(`starships/${id}`);\n      return this._transformStarShip(starship);\n    };\n\n    this.getAllPeople = async () => {\n      const peoples = await this._fetchToSwapi('people');\n      return peoples.results.map(people => this._transformPerson(people));\n    };\n\n    this.getPeople = async id => {\n      const people = await this._fetchToSwapi(`people/${id}`);\n      return this._transformPerson(people);\n    };\n\n    this.getAllPlanets = async () => {\n      const planets = await this._fetchToSwapi('planets');\n      return planets.results.map(planet => this._transformPlanet(planet));\n    };\n\n    this.getPlanet = async id => {\n      const planet = await this._fetchToSwapi(`planets/${id}`);\n      return this._transformPlanet(planet);\n    };\n\n    this.getPersonImage = async ({\n      id\n    }) => {};\n\n    this.getStarshipImage = async ({\n      id\n    }) => {};\n\n    this.getPlanetImage = async ({\n      id\n    }) => {};\n  }\n\n}\n\nexport const swapi = new SwapiService();","map":{"version":3,"sources":["/home/user/Рабочий стол/Git repos/sashabull66/sashabull66/sashabull66/starsDB/src/services/swapi/SwapiService.js"],"names":["SwapiService","_startUrl","_extractId","item","idRegExp","url","match","_transformPlanet","planet","id","name","population","rotationPeriod","rotation_period","diameter","_transformStarShip","ship","model","manufacturer","costInCredit","length","crew","passengers","cargoCapacity","_transformPerson","person","gender","birthYear","birth_year","eyeColor","eye_color","_fetchToSwapi","f","fetch","toString","ok","Error","status","json","getAllStarship","starships","results","map","people","getStarship","starship","getAllPeople","peoples","getPeople","getAllPlanets","planets","getPlanet","getPersonImage","getStarshipImage","getPlanetImage","swapi"],"mappings":"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","sourcesContent":["class SwapiService {\n    _startUrl = 'https://swapi.dev/api/';\n    _extractId = (item) => {\n        const idRegExp = /\\/([0-9]*)\\/$/;\n        return item.url.match(idRegExp)[1];\n    };\n    _transformPlanet = (planet) => {\n        const id = this._extractId(planet)\n        return {\n            id,\n            name: planet.name,\n            population: planet.population,\n            rotationPeriod: planet.rotation_period,\n            diameter: planet.diameter\n        }\n    };\n    _transformStarShip = (ship) => {\n        const id = this._extractId(ship)\n        return {\n            id,\n            name: ship.name,\n            model: ship.model,\n            manufacturer: ship.manufacturer,\n            costInCredit: ship.costInCredit,\n            length: ship.length,\n            crew: ship.crew,\n            passengers: ship.passengers,\n            cargoCapacity: ship.cargoCapacity\n        }\n    };\n    _transformPerson = (person) => {\n        const id = this._extractId(person)\n        return {\n            id,\n            name: person.name,\n            gender: person.gender,\n            birthYear: person.birth_year,\n            eyeColor: person.eye_color\n        }\n    };\n    _fetchToSwapi = async (url) => {\n        const f = await fetch(this._startUrl + url.toString())\n        if (!f.ok) {\n            throw new Error(`Not fetch url ${url}. Error status - ${f.status}`)\n        }\n        return await f.json()\n    };\n\n    getAllStarship = async () => {\n        const starships = await this._fetchToSwapi('starships')\n        return starships.results.map(people=>this._transformStarShip(people))\n    };\n    getStarship = async (id) => {\n        const starship = await this._fetchToSwapi(`starships/${id}`)\n        return this._transformStarShip(starship)\n    };\n    getAllPeople = async () => {\n        const peoples = await this._fetchToSwapi('people')\n        return peoples.results.map(people=>this._transformPerson(people))\n    };\n    getPeople = async (id) => {\n        const people = await this._fetchToSwapi(`people/${id}`)\n        return this._transformPerson(people)\n    };\n    getAllPlanets = async () => {\n        const planets = await this._fetchToSwapi('planets')\n        return planets.results.map(planet => this._transformPlanet(planet))\n    };\n    getPlanet = async (id) => {\n        const planet = await this._fetchToSwapi(`planets/${id}`)\n        return this._transformPlanet(planet)\n    };\n    getPersonImage = async ({id}) => {};\n    getStarshipImage = async ({id}) => {};\n    getPlanetImage = async ({id}) => {};\n}\n\nexport const swapi = new SwapiService();\n"]},"metadata":{},"sourceType":"module"}